#if !defined(_PELLA_T_)
#  define _PELLA_T_

class model_data : public ad_comm{
  data_int nobs;
  data_matrix data;
  dvector obs_catch;
  dvector cpue;
  dvector effort;
  double avg_effort;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number r;
  param_init_bounded_number beta;
  param_init_number log_binit;
  param_init_bounded_number q;
  param_init_bounded_number m;
  param_init_bounded_dev_vector effort_devs;
  param_init_bounded_vector k_devs;
  param_number binit;
  param_vector pred_catch;
  param_vector biomass;
  param_vector f;
  param_vector k;
  param_vector k_trend;
  param_stddev_number k_1;
  param_stddev_number k_last;
  param_stddev_number k_change;
  param_stddev_number k_ratio;
  param_stddev_number B_projected;
  param_number tmp_mort;
  param_number bio_tmp;
  param_number c_tmp;
  objective_function_value ff;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void calculate_fishing_mortality(void);
  void calculate_biomass_and_predicted_catch(void);
  void calculate_the_objective_function(void);

};
#endif
